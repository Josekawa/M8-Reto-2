# Paquetes
suppressPackageStartupMessages({
library(tidyverse)
library(readr)
library(flexdashboard)
library(plotly)
library(DT)
library(scales)
})
install.packages("flexdashboard")
# Paquetes
suppressPackageStartupMessages({
library(tidyverse)
library(readr)
library(flexdashboard)
library(plotly)
library(DT)
library(scales)
})
install.packages("plotly")
# Paquetes
suppressPackageStartupMessages({
library(tidyverse)
library(readr)
library(flexdashboard)
library(plotly)
library(DT)
library(scales)
})
# Carga de datos (ruta relativa desde la carpeta 'Dashboard' a 'Datos')
# Estructura esperada en tu PC:
# C:/Users/zoso9/Desktop/Tarea 2/Datos/CRON2W4e01_depurado.csv
# C:/Users/zoso9/Desktop/Tarea 2/Dashboard/dashboard.Rmd
# Por tanto, desde Dashboard a Datos: ../Datos/archivo.csv
df <- read_csv("../Datos/CRON2W4e01_depurado.csv", show_col_types = FALSE)
# Vectores auxiliares
paises <- sort(unique(df$cntry))
cohortes <- df$age_group %>% unique() %>% na.omit() %>% as.character() %>% sort()
# Funciones auxiliares
mode_labels <- c("F2F (presencial)","CATI (teléfono)","CAWI (online)","Otro","NS/NC")
selectInput("pais", "País", choices = c("Todos", paises), selected = "Todos")
# Paquetes
suppressPackageStartupMessages({
library(tidyverse)
library(readr)
library(shiny)
library(flexdashboard)
library(plotly)
library(DT)
library(scales)
})
# Carga de datos (ruta relativa desde la carpeta 'Dashboard' a 'Datos')
# Estructura esperada en tu PC:
# C:/Users/zoso9/Desktop/Tarea 2/Datos/CRON2W4e01_depurado.csv
# C:/Users/zoso9/Desktop/Tarea 2/Dashboard/dashboard.Rmd
# Por tanto, desde Dashboard a Datos: ../Datos/archivo.csv
df <- read_csv("../Datos/CRON2W4e01_depurado.csv", show_col_types = FALSE)
# Vectores auxiliares
paises <- sort(unique(df$cntry))
cohortes <- df$age_group %>% unique() %>% na.omit() %>% as.character() %>% sort()
# Funciones auxiliares
mode_labels <- c("F2F (presencial)","CATI (teléfono)","CAWI (online)","Otro","NS/NC")
selectInput("pais", "País", choices = c("Todos", paises), selected = "Todos")
selectInput("gndr", "Género", choices = c("Todos","Hombre","Mujer"), selected = "Todos")
selectInput("ageg", "Cohorte de edad", choices = c("Todas", cohortes), selected = "Todas")
renderUI({
datos <- df
if (input$pais != "Todos") datos <- dplyr::filter(datos, cntry == input$pais)
if (input$gndr != "Todos") datos <- dplyr::filter(datos, gndr_lab == input$gndr)
if (input$ageg != "Todas") datos <- dplyr::filter(datos, age_group == input$ageg)
trust_mean <- mean(datos$trust_index, na.rm = TRUE)
n_obs <- nrow(datos)
htmltools::div(
style = "padding: 8px;",
htmltools::h3(sprintf("Índice de confianza medio: %.2f", trust_mean)),
htmltools::p(sprintf("Observaciones: %s", scales::comma(n_obs)))
)
})
renderPlotly({
datos <- df
if (input$pais != "Todos") datos <- dplyr::filter(datos, cntry == input$pais)
if (input$gndr != "Todos") datos <- dplyr::filter(datos, gndr_lab == input$gndr)
if (input$ageg != "Todas") datos <- dplyr::filter(datos, age_group == input$ageg)
p <- datos %>%
group_by(cntry) %>%
summarise(trust = mean(trust_index, na.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = reorder(cntry, trust), y = trust)) +
geom_col() +
coord_flip() +
labs(x = "País", y = "Índice de confianza (1–5)") +
theme_minimal()
ggplotly(p)
})
renderPlotly({
datos <- df
if (input$pais != "Todos") datos <- dplyr::filter(datos, cntry == input$pais)
if (input$gndr != "Todos") datos <- dplyr::filter(datos, gndr_lab == input$gndr)
if (input$ageg != "Todas") datos <- dplyr::filter(datos, age_group == input$ageg)
p <- datos %>%
count(w4q1) %>%
mutate(w4q1 = factor(w4q1, levels = 1:5,
labels = c("Nada", "Poco", "Medio", "Importante", "Muy"))) %>%
ggplot(aes(x = w4q1, y = n)) +
geom_col() +
labs(x = "w4q1 — Prioridad declarada", y = "Frecuencia") +
theme_minimal()
ggplotly(p)
})
renderPlotly({
datos <- df
if (input$pais != "Todos") datos <- dplyr::filter(datos, cntry == input$pais)
if (input$ageg != "Todas") datos <- dplyr::filter(datos, age_group == input$ageg)
p <- datos %>%
count(gndr_lab) %>%
mutate(gndr_lab = forcats::fct_na_value_to_level(gndr_lab, level = "NS/NC"),
gndr_lab = factor(gndr_lab, levels = c("Mujer","Hombre","NS/NC"))) %>%
ggplot(aes(x = gndr_lab, y = n)) +
geom_col() +
labs(x = "Género", y = "Frecuencia") +
theme_minimal()
ggplotly(p)
})
renderPlotly({
datos <- df
if (input$pais != "Todos") datos <- dplyr::filter(datos, cntry == input$pais)
if (input$gndr != "Todos") datos <- dplyr::filter(datos, gndr_lab == input$gndr)
if (input$ageg != "Todas") datos <- dplyr::filter(datos, age_group == input$ageg)
p <- datos %>%
count(mode_lab) %>%
mutate(mode_lab = factor(mode_lab, levels = c("F2F (presencial)","CATI (teléfono)","CAWI (online)","Otro","NS/NC"))) %>%
ggplot(aes(x = mode_lab, y = n)) +
geom_col() +
labs(x = "Método de recogida", y = "Frecuencia") +
theme_minimal()
ggplotly(p)
})
renderDT({
datos <- df
if (input$pais != "Todos") datos <- dplyr::filter(datos, cntry == input$pais)
if (input$gndr != "Todos") datos <- dplyr::filter(datos, gndr_lab == input$gndr)
if (input$ageg != "Todas") datos <- dplyr::filter(datos, age_group == input$ageg)
datos %>%
select(idno, cntry, gndr_lab, agea, age_group, mode_lab, trust_index, w4q1, w4q14) %>%
datatable(options = list(pageLength = 10), filter = "top")
})
htmltools::div(
style = "padding: 10px;",
htmltools::h4("Notas"),
htmltools::p("Base de datos: CRON2W4e01_depurado.csv (depurada con script propio)."),
htmltools::p("Ítems de confianza (w4q61–w4q73) promediados en trust_index (1–5)."),
htmltools::p("Este dashboard usa rutas relativas para facilitar la reproducibilidad: ../Datos/CRON2W4e01_depurado.csv")
)
